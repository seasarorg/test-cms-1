/* Generated By:JJTree&JavaCC: Do not edit this line. WikiParser.java */
package org.seasar.cms.wiki.parser;

import java.util.List;
import java.util.ArrayList;

//import org.apache.commons.logging.Log;
//import org.apache.commons.logging.LogFactory;

import org.seasar.framework.log.Logger;
import org.seasar.cms.wiki.util.GenerateNodeHelper;

/**
 * @author someda
 *
 * NOT TO IMPLMENT: (2005/10)
 * - Table format ('h','c', at the end of table line)
 *
 * NOTE:
 * - Token Specification Policy
 *   Token is defined as simple as possible.
 *   As the lexical tips (https://javacc.dev.java.net/doc/lexertips.html) says,
 *   the complex RE in token definition is avoided as much as possible,
 *   otherwise most of such jobs will be done by parser using LOOKAHEAD.   
 * - ParseException Handling Policy
 *   In GenerateTree(),BlockElement() and InlineElement(),
 *   ParseException will be caught, that is 3-level error handling.
 *   The one caught in GenerateTree() is thought as Fatal Exception,
 *   because syntax error should be caught in try-catch clause of
 *   BlockElement() or InlineElement().
 *   In BlockElement(), when exception occurs, it will proceed 
 *   TokenManager consumption until next newline token will apear, 
 *   as to InlineElement it'll do nothing about TokenManager.
 *   During exception handling in both BlockElement() and InlineElement(), 
 *   it pushes WikiErrors node on top of the stack for not losing 
 *   error position itself.
 *   NT Errors() is just only for this purpose and will not be generated 
 *   during regular parsing.
*/
public class WikiParser/*@bgen(jjtree)*/implements WikiParserTreeConstants, WikiParserConstants {/*@bgen(jjtree)*/
  protected JJTWikiParserState jjtree = new JJTWikiParserState();
        private static final int[] BLOCKELEMENT_KIND =
                {NL,EXCERPT1,EXCERPT2,EXCERPT3,LIST1,LIST2,LIST3,NLIST1,NLIST2,NLIST3,
                 DLIST,PRESHAPED,TABLE,CTABLE,HEADING1,HEADING2,HEADING3,ALIGN1,ALIGN2,ALIGN3,
                 FALIGN1,FALIGN2,HORIZONTAL,BLOCKPLUGIN,EOF};

        private static final int[] EXCERPT_KIND = {EXCERPT1,EXCERPT2,EXCERPT3};
        private static final int[] LIST_KIND = {LIST1,LIST2,LIST3,NLIST1,NLIST2,NLIST3};
        private static final int[] PRESHAPED_KIND = {PRESHAPED};
        private static final int[] HEADING_KIND = {HEADING1,HEADING2,HEADING3};
        private static final int[] ALIGN_KIND = {ALIGN1,ALIGN2,ALIGN3};
        private static final int[] FALIGN_KIND = {FALIGN1,FALIGN2};
        private static final int[] HORIZONTAL_KIND = {HORIZONTAL};
        private static final int[] BLOCKPLUGIN_KIND = {BLOCKPLUGIN};

        private List toc_ = new ArrayList();
        private List annotation_ = new ArrayList();
        private int nParseErrors_ = 0;
        private int startpos_ = -1;

        private WikiCharStream jj_input_stream;

        private Logger log_ = Logger.getLogger(getClass());

        public WikiParser(){
        }

        public void setWikiCharStream(WikiCharStream stream){
                this.jj_input_stream = stream;
        }

        public int addAnnotation(SimpleNode node){
                annotation_.add(node);
                return annotation_.size();
        }

        public int addTOC(SimpleNode node){
                toc_.add(node);
                return toc_.size();
        }

        public int getNParseErrors(){
                return nParseErrors_;
        }

        public int getNLexicalErrors(){
                return token_source.getNLexicalErrors();
        }

        /**
 	 * Setting current buffer position of JavaCharacterStream
 	 * for error recovery.
 	 * JavaCharacterStream uses ring buffer to store the character
 	 * stream inside its instance.
 	 */
        // NOTE: 08/24
        // This doesn't work propery, more detail investigation needed.
        // In some cases (like []+ construction), it seems not to
        // get buffer current position index (bufpos) properly.
        // At the token consumption, the methods will be
        // called in the following order, 
        // 
        // method : WikiParser#jj_consume_token()
        //          WikiParserTokenManager#getNextToken()
        //          JavaCharacterStream#BeginToken()
        //          JavaCharacterStream#readChar()
        //          JavaCharacterStream#ReadByte()
        protected void setStartPosition(){
                this.startpos_ = jj_input_stream.bufpos;
        }

        protected void initStartPosition(){
                this.startpos_ = -1;
        }

    protected String getErrorLine(){

        if(startpos_ == -1) return "";

        int curpos = jj_input_stream.bufpos;
        log_.log("WCMSWIKI0001",new Object[]{curpos +"",startpos_ + "",jj_input_stream.tokenBegin+"",token_source.jjmatchedPos +""});

        if(curpos >= startpos_)
                return new String(jj_input_stream.buffer,startpos_,curpos - startpos_ + 1);
        else
                return new String(jj_input_stream.buffer,startpos_,jj_input_stream.bufsize-startpos_)+
                                        new String(jj_input_stream.buffer,0,curpos+1);
        }

        /* [Start] ----- methods for LOOKAHEAD ----- */

        /* For LOOKAHEAD(<NL> <NL>), to detect sequential <NL>*/
        protected boolean isBlankline(){
                Token t1 = getToken(1);
                Token t2 = getToken(2);
                return (t1.kind == NL && (t2.kind == NL || t2.kind == EOF || t2.kind == TABLE || t2.kind == CTABLE || t2.kind == DLIST));
        }

        /* For LOOKAHEAD(<NL> "NOT BLOCKELEMENT TOPMARK") */
        protected boolean isParagraph(){
                boolean flag = true;
                if(isNewline(1)){
                        for(int i=0;i<BLOCKELEMENT_KIND.length;i++){
                                Token t = getToken(2);
                                if(t.kind == BLOCKELEMENT_KIND[i]){
                                        flag = false;
                                        break;
                                }
                        }
                }else{
                        flag = false;
                }

                if(isTable()) flag = false;
                if(isCSVTable()) flag = false;
                if(isDefineList()) flag = false;
                return flag;
        }

        /* */
        protected boolean isNormalBlockElement(int[] types){
                // getNewline should not be used for here, 
                // for example, string "| foo |" is considered as Preshaped
                if(getToken(1).kind == NL){
                        Token t = getToken(2);
                        for(int i=0; i < types.length; i++){
                                if(t.kind == types[i]) return true;
                        }
                }
                return false;
        }

        /* For LOOKAHEAD(<TABLE>), LOOKAHEAD(<CTABLE>), LOOKAHEAD(<DLIST>) */
        protected boolean isChangeStateBlockElement(int type){
                Token t = getToken(1);
                return (t.kind == type);
        }

        /* For LOOKAHEAD(<NL> <EXCERPT1>|<EXCERPT2>|<EXCERPT3>) */
        protected boolean isExcerpt(){
                return isNormalBlockElement(EXCERPT_KIND);
        }

        /* For LOOKAHEAD(<NL> <LIST1>|<LIST2>|<LIST3>|<NLIST1>|<NLIST2>|<NLIST3>) */
        protected boolean isList(){
                return isNormalBlockElement(LIST_KIND);
        }

        /* For LOOKAHEAD(<DLIST>) */
        protected boolean isDefineList(){
                return isChangeStateBlockElement(DLIST);
        }

        /* For LOOKAHEAD(<NL> <PRESHAPED>) */
        protected boolean isPreshaped(){
                return isNormalBlockElement(PRESHAPED_KIND);
        }

        /* For LOOKAHEAD(<TABLE>) */
        protected boolean isTable(){
                return isChangeStateBlockElement(TABLE);
        }

        /* For LOOKAHEAD(<CTABLE>) */
        protected boolean isCSVTable(){
                return isChangeStateBlockElement(CTABLE);
        }

        /* For LOOKAHEAD(<NL> <HEADING1>|<HEADING2>|<HEADING3>) */
        protected boolean isHeading(){
                return isNormalBlockElement(HEADING_KIND);
        }

        /* For LOOKAHEAD(<NL> <ALIGN1>|<ALIGN2>|<ALIGN3>) */
        protected boolean isAlign(){
                return isNormalBlockElement(ALIGN_KIND);
        }

        protected boolean isFloatAlign(){
                return isNormalBlockElement(FALIGN_KIND);
        }

        /* For LOOKAHEAD(<NL> <HORIZONTAL>) */
        protected boolean isHorizontalline(){
                return isNormalBlockElement(HORIZONTAL_KIND);
        }

        /* For LOOKAHEAD(<NL> <BLOCKPLUGIN>)*/
        protected boolean isBlockPlugin(){
                return isNormalBlockElement(BLOCKPLUGIN_KIND);
        }

        protected boolean isNewline(int pos){
                Token t = getToken(pos);
                return (t.kind == NL || t.kind == TABLE || t.kind == CTABLE || t.kind == DLIST);
        }

        /* [End] ----- methods for LOOKAHEAD ----- */

        /* error processing method */
        private void processError(String msg, boolean inline,ParseException pe){
                ++nParseErrors_;
                WikiErrors enode = new WikiErrors(JJTERRORS);
//		StringBuffer buf = new StringBuffer(getErrorLine());
                StringBuffer buf = new StringBuffer();
                buf.append(getToken(0).image);
                jjtree.openNodeScope(enode);

//		initStartPosition();

                // this is important to avoid infinite loop
                // when exception occured at choice point of BlockElement.
                if(isNewline(0)) getNextToken();

                if(inline){
                        if(!isNewline(1)) getNextToken();
                }else{
                        while(!isNewline(1)){
                                buf.append(getNextToken().image);
                        }
                }
                enode.letter = buf.toString();
                jjtree.closeNodeScope(enode,true);
                log_.log("WCMSWIKI0002",new Object[]{msg,enode.letter});
        }

  void SyntaxError() throws ParseException {
                   /*@bgen(jjtree) SyntaxError */
     WikiSyntaxError jjtn000 = new WikiSyntaxError(JJTSYNTAXERROR);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {ParseException e = generateParseException();
        StringBuffer buf = new StringBuffer();
        buf.append(getToken(0));
        Token t;
        while(!isNewline(1)){
                t=getNextToken();
                buf.append(t.image);
        }
        jjtn000.letter = buf.toString();
        throw e;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  void SkipToNewline() throws ParseException {
                     /*@bgen(jjtree) SkipToNewline */
     WikiSkipToNewline jjtn000 = new WikiSkipToNewline(JJTSKIPTONEWLINE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {StringBuffer buf = new StringBuffer();
        while(!isNewline(1)){
                Token t=getNextToken();
                buf.append(t.image);
        }
        jjtn000.letter = buf.toString();/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

/* Syntax Definition */
  final public void GenerateTree() throws ParseException {
 /*@bgen(jjtree) GenerateTree */
  WikiGenerateTree jjtn000 = new WikiGenerateTree(JJTGENERATETREE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        try {
          if (jj_2_1(1)) {
            BlockElement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 0:
              jj_consume_token(0);
                                jjtn000.annotation = annotation_;
                                jjtn000.toc = toc_;
                                {if (true) return;}
              break;
            default:
              SyntaxError();
            }
          }
        } catch (ParseException pe) {
                        ++nParseErrors_;
                        processError("critical parsing error at syntax level.",false,pe);
        }
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BlockElement() throws ParseException {
    try {
      if (isExcerpt()) {
        Excerpt();
      } else if (isList()) {
        List();
      } else if (isDefineList()) {
        DefineList();
      } else if (isPreshaped()) {
        Preshaped();
      } else if (isTable()) {
        Table();
      } else if (isCSVTable()) {
        CSVTable();
      } else if (isHeading()) {
        Heading();
      } else if (isAlign()) {
        Align();
      } else if (isFloatAlign()) {
        FloatAlign();
      } else if (isHorizontalline()) {
        Horizontalline();
      } else if (isBlankline()) {
        Blankline();
      } else if (isBlockPlugin()) {
        BlockPlugin();
      } else if (jj_2_2(1)) {
        Paragraph();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
                        processError("parsing error for block element.",false,pe);
    }
  }

  final public void InlineElement() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRONGITALIC:
        StrongItalic();
        break;
      case DELETELINE:
        Deleteline();
        break;
      case 73:
        Annotation();
        break;
      case PAGENAME:
      case LINK:
      case INTERWIKI:
      case ALIASLINK:
      case ALIAS:
        Linker();
        break;
      case INLINEPLUGIN:
        InlinePlugin();
        break;
      case TILDE:
      case SEMICOLON:
      case LPAREN:
      case RPAREN:
      case LBRACKET:
      case RBRACKET:
      case LBRACE:
      case RBRACE:
      case SLASH:
      case LT:
      case EXCERPT1:
      case EXCERPT2:
      case EXCERPT3:
      case LIST1:
      case LIST2:
      case LIST3:
      case NLIST1:
      case NLIST2:
      case NLIST3:
      case PRESHAPED:
      case HEADING1:
      case HEADING2:
      case HEADING3:
      case ALIGN1:
      case ALIGN2:
      case ALIGN3:
      case FALIGN1:
      case FALIGN2:
      case HORIZONTAL:
      case BLOCKPLUGIN:
      case COLSPAN:
      case PIPE:
      case COLON:
      case COMMA:
      case WIKINAME:
      case NATIVELINK:
      case ANCHOR:
      case IDENTIFIER:
      case ARGS:
        Letters();
        break;
      case ANYOTHER:
        AnyOther();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pe) {
                        processError("parsing error for inline element.",true,pe);
    }
  }

/* BlockElement Definition */
  final public void Paragraph() throws ParseException {
 /*@bgen(jjtree) Paragraph */
  WikiParagraph jjtn000 = new WikiParagraph(JJTPARAGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        jj_consume_token(NL);
        if (jj_2_3(2147483647) && (!isNewline(2))) {
          jj_consume_token(TILDE);
        } else {
          ;
        }
        label_3:
        while (true) {
          InlineElement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
          case SEMICOLON:
          case LPAREN:
          case RPAREN:
          case LBRACKET:
          case RBRACKET:
          case LBRACE:
          case RBRACE:
          case SLASH:
          case LT:
          case EXCERPT1:
          case EXCERPT2:
          case EXCERPT3:
          case LIST1:
          case LIST2:
          case LIST3:
          case NLIST1:
          case NLIST2:
          case NLIST3:
          case PRESHAPED:
          case HEADING1:
          case HEADING2:
          case HEADING3:
          case ALIGN1:
          case ALIGN2:
          case ALIGN3:
          case FALIGN1:
          case FALIGN2:
          case HORIZONTAL:
          case BLOCKPLUGIN:
          case COLSPAN:
          case PIPE:
          case COLON:
          case COMMA:
          case DELETELINE:
          case STRONGITALIC:
          case WIKINAME:
          case NATIVELINK:
          case ANCHOR:
          case PAGENAME:
          case LINK:
          case INTERWIKI:
          case ALIASLINK:
          case ALIAS:
          case IDENTIFIER:
          case ARGS:
          case INLINEPLUGIN:
          case ANYOTHER:
          case 73:
            ;
            break;
          default:
            break label_3;
          }
        }
        if (isParagraph()) {
          ;
        } else {
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Excerpt() throws ParseException {
 /*@bgen(jjtree) Excerpt */
        WikiExcerpt jjtn000 = new WikiExcerpt(JJTEXCERPT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(NL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXCERPT1:
        t = jj_consume_token(EXCERPT1);
        break;
      case EXCERPT2:
        t = jj_consume_token(EXCERPT2);
        break;
      case EXCERPT3:
        t = jj_consume_token(EXCERPT3);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case DELETELINE:
        case STRONGITALIC:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
        case 73:
          ;
          break;
        default:
          break label_4;
        }
        InlineElement();
      }
      label_5:
      while (true) {
        if (jj_2_4(1)) {
          ;
        } else {
          break label_5;
        }
        if (isExcerpt()) {
          Excerpt();
        } else if (isList()) {
          List();
        } else if (isDefineList()) {
          DefineList();
        } else if (isPreshaped()) {
          Preshaped();
        } else if (isTable()) {
          Table();
        } else if (isCSVTable()) {
          CSVTable();
        } else if (isAlign()) {
          Align();
        } else if (isBlockPlugin()) {
          BlockPlugin();
        } else if (isParagraph()) {
          Paragraph();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.level = t.image.length();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void List() throws ParseException {
 /*@bgen(jjtree) List */
        WikiList jjtn000 = new WikiList(JJTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      label_6:
      while (true) {
                  WikiListMember jjtn001 = new WikiListMember(JJTLISTMEMBER);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          if (isList()) {

          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(NL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST1:
            t = jj_consume_token(LIST1);
            break;
          case LIST2:
            t = jj_consume_token(LIST2);
            break;
          case LIST3:
            t = jj_consume_token(LIST3);
            break;
          case NLIST1:
            t = jj_consume_token(NLIST1);
            break;
          case NLIST2:
            t = jj_consume_token(NLIST2);
            break;
          case NLIST3:
            t = jj_consume_token(NLIST3);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TILDE:
            case SEMICOLON:
            case LPAREN:
            case RPAREN:
            case LBRACKET:
            case RBRACKET:
            case LBRACE:
            case RBRACE:
            case SLASH:
            case LT:
            case EXCERPT1:
            case EXCERPT2:
            case EXCERPT3:
            case LIST1:
            case LIST2:
            case LIST3:
            case NLIST1:
            case NLIST2:
            case NLIST3:
            case PRESHAPED:
            case HEADING1:
            case HEADING2:
            case HEADING3:
            case ALIGN1:
            case ALIGN2:
            case ALIGN3:
            case FALIGN1:
            case FALIGN2:
            case HORIZONTAL:
            case BLOCKPLUGIN:
            case COLSPAN:
            case PIPE:
            case COLON:
            case COMMA:
            case DELETELINE:
            case STRONGITALIC:
            case WIKINAME:
            case NATIVELINK:
            case ANCHOR:
            case PAGENAME:
            case LINK:
            case INTERWIKI:
            case ALIASLINK:
            case ALIAS:
            case IDENTIFIER:
            case ARGS:
            case INLINEPLUGIN:
            case ANYOTHER:
            case 73:
              ;
              break;
            default:
              break label_7;
            }
            InlineElement();
          }
          label_8:
          while (true) {
            if (jj_2_5(1)) {
              ;
            } else {
              break label_8;
            }
            if (isExcerpt()) {
              Excerpt();
            } else if (isDefineList()) {
              DefineList();
            } else if (isPreshaped()) {
              Preshaped();
            } else if (isTable()) {
              Table();
            } else if (isCSVTable()) {
              CSVTable();
            } else if (isAlign()) {
              Align();
            } else if (isBlockPlugin()) {
              BlockPlugin();
            } else if (isParagraph()) {
              Paragraph();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                                jjtn001.level = t.image.length();
                                jjtn001.type = GenerateNodeHelper.getListType(t.image);
        } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
        if (jj_2_6(1)) {
          ;
        } else {
          break label_6;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DefineList() throws ParseException {
 /*@bgen(jjtree) DefineList */
  WikiDefineList jjtn000 = new WikiDefineList(JJTDEFINELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        jj_consume_token(DLIST);
                                                     setStartPosition();
                                                                             WikiDefinedWord jjtn001 = new WikiDefinedWord(JJTDEFINEDWORD);
                                                                             boolean jjtc001 = true;
                                                                             jjtree.openNodeScope(jjtn001);
        try {
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TILDE:
            case SEMICOLON:
            case LPAREN:
            case RPAREN:
            case LBRACKET:
            case RBRACKET:
            case LBRACE:
            case RBRACE:
            case SLASH:
            case LT:
            case EXCERPT1:
            case EXCERPT2:
            case EXCERPT3:
            case LIST1:
            case LIST2:
            case LIST3:
            case NLIST1:
            case NLIST2:
            case NLIST3:
            case PRESHAPED:
            case HEADING1:
            case HEADING2:
            case HEADING3:
            case ALIGN1:
            case ALIGN2:
            case ALIGN3:
            case FALIGN1:
            case FALIGN2:
            case HORIZONTAL:
            case BLOCKPLUGIN:
            case COLSPAN:
            case PIPE:
            case COLON:
            case COMMA:
            case DELETELINE:
            case STRONGITALIC:
            case WIKINAME:
            case NATIVELINK:
            case ANCHOR:
            case PAGENAME:
            case LINK:
            case INTERWIKI:
            case ALIASLINK:
            case ALIAS:
            case IDENTIFIER:
            case ARGS:
            case INLINEPLUGIN:
            case ANYOTHER:
            case 73:
              ;
              break;
            default:
              break label_10;
            }
            InlineElement();
          }
        } catch (Throwable jjte001) {
                                                                             if (jjtc001) {
                                                                               jjtree.clearNodeScope(jjtn001);
                                                                               jjtc001 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte001 instanceof RuntimeException) {
                                                                               {if (true) throw (RuntimeException)jjte001;}
                                                                             }
                                                                             if (jjte001 instanceof ParseException) {
                                                                               {if (true) throw (ParseException)jjte001;}
                                                                             }
                                                                             {if (true) throw (Error)jjte001;}
        } finally {
                                                                             if (jjtc001) {
                                                                               jjtree.closeNodeScope(jjtn001, true);
                                                                             }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TABLEDEL:
          jj_consume_token(TABLEDEL);
          break;
        case NTABCOLSPAN:
          jj_consume_token(NTABCOLSPAN);
          break;
        case NTABROWSPAN:
          jj_consume_token(NTABROWSPAN);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
                  WikiExplanationWord jjtn002 = new WikiExplanationWord(JJTEXPLANATIONWORD);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
            jj_consume_token(TILDE);
            break;
          default:
            ;
          }
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TILDE:
            case SEMICOLON:
            case LPAREN:
            case RPAREN:
            case LBRACKET:
            case RBRACKET:
            case LBRACE:
            case RBRACE:
            case SLASH:
            case LT:
            case EXCERPT1:
            case EXCERPT2:
            case EXCERPT3:
            case LIST1:
            case LIST2:
            case LIST3:
            case NLIST1:
            case NLIST2:
            case NLIST3:
            case PRESHAPED:
            case HEADING1:
            case HEADING2:
            case HEADING3:
            case ALIGN1:
            case ALIGN2:
            case ALIGN3:
            case FALIGN1:
            case FALIGN2:
            case HORIZONTAL:
            case BLOCKPLUGIN:
            case COLSPAN:
            case PIPE:
            case COLON:
            case COMMA:
            case DELETELINE:
            case STRONGITALIC:
            case WIKINAME:
            case NATIVELINK:
            case ANCHOR:
            case PAGENAME:
            case LINK:
            case INTERWIKI:
            case ALIASLINK:
            case ALIAS:
            case IDENTIFIER:
            case ARGS:
            case INLINEPLUGIN:
            case ANYOTHER:
            case 73:
              ;
              break;
            default:
              break label_11;
            }
            InlineElement();
          }
          label_12:
          while (true) {
            if (jj_2_7(1)) {
              ;
            } else {
              break label_12;
            }
            if (isExcerpt()) {
              Excerpt();
            } else if (isList()) {
              List();
            } else if (isPreshaped()) {
              Preshaped();
            } else if (isTable()) {
              Table();
            } else if (isCSVTable()) {
              CSVTable();
            } else if (isAlign()) {
              Align();
            } else if (isBlockPlugin()) {
              BlockPlugin();
            } else if (isParagraph()) {
              Paragraph();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
        }
        if (isDefineList()) {
          ;
        } else {
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Preshaped() throws ParseException {
 /*@bgen(jjtree) Preshaped */
  WikiPreshaped jjtn000 = new WikiPreshaped(JJTPRESHAPED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        jj_consume_token(NL);
        jj_consume_token(PRESHAPED);
        SkipToNewline();
        if (isPreshaped()) {
          ;
        } else {
          break label_13;
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Table() throws ParseException {
 /*@bgen(jjtree) Table */
        WikiTable jjtn000 = new WikiTable(JJTTABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      label_14:
      while (true) {
        jj_consume_token(TABLE);
                                                setStartPosition();
        try {
                          WikiTablemember jjtn002 = new WikiTablemember(JJTTABLEMEMBER);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
          try {
            label_15:
            while (true) {
                                  WikiTablecolumn jjtn001 = new WikiTablecolumn(JJTTABLECOLUMN);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
              try {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NTABCOLSPAN:
                  jj_consume_token(NTABCOLSPAN);
                                                        jjtree.closeNodeScope(jjtn001, true);
                                                        jjtc001 = false;
                                                       jjtn001.iscolspan = true;
                  break;
                case NTABROWSPAN:
                  jj_consume_token(NTABROWSPAN);
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                         jjtn001.isrowspan = true;
                  break;
                default:
                  if (jj_2_8(1)) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case ALIGN1:
                    case ALIGN2:
                    case ALIGN3:
                    case COLORWORD:
                    case BGCOLORWORD:
                    case SIZEWORD:
                      label_16:
                      while (true) {
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case ALIGN1:
                          t = jj_consume_token(ALIGN1);
                                                                    jjtn001.align = t.image.substring(0,t.image.length()-1);
                          break;
                        case ALIGN2:
                          t = jj_consume_token(ALIGN2);
                                                                      jjtn001.align = t.image.substring(0,t.image.length()-1);
                          break;
                        case ALIGN3:
                          t = jj_consume_token(ALIGN3);
                                                                      jjtn001.align = t.image.substring(0,t.image.length()-1);
                          break;
                        case COLORWORD:
                          t = jj_consume_token(COLORWORD);
                                                                         jjtn001.color=GenerateNodeHelper.deleteParenthesis(t.image,"(",")");
                          break;
                        case BGCOLORWORD:
                          t = jj_consume_token(BGCOLORWORD);
                                                                           jjtn001.bgcolor = GenerateNodeHelper.deleteParenthesis(t.image,"(",")");
                          break;
                        case SIZEWORD:
                          t = jj_consume_token(SIZEWORD);
                                                                        jjtn001.size = GenerateNodeHelper.deleteParenthesis(t.image,"(",")");
                          break;
                        default:
                          jj_consume_token(-1);
                          throw new ParseException();
                        }
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case ALIGN1:
                        case ALIGN2:
                        case ALIGN3:
                        case COLORWORD:
                        case BGCOLORWORD:
                        case SIZEWORD:
                          ;
                          break;
                        default:
                          break label_16;
                        }
                      }
                      break;
                    default:
                      ;
                    }
                    if (!(getToken(1).kind==IDENTIFIER && isNewline(2))) {

                    } else {
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                    label_17:
                    while (true) {
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case TILDE:
                      case SEMICOLON:
                      case LPAREN:
                      case RPAREN:
                      case LBRACKET:
                      case RBRACKET:
                      case LBRACE:
                      case RBRACE:
                      case SLASH:
                      case LT:
                      case EXCERPT1:
                      case EXCERPT2:
                      case EXCERPT3:
                      case LIST1:
                      case LIST2:
                      case LIST3:
                      case NLIST1:
                      case NLIST2:
                      case NLIST3:
                      case PRESHAPED:
                      case HEADING1:
                      case HEADING2:
                      case HEADING3:
                      case ALIGN1:
                      case ALIGN2:
                      case ALIGN3:
                      case FALIGN1:
                      case FALIGN2:
                      case HORIZONTAL:
                      case BLOCKPLUGIN:
                      case COLSPAN:
                      case PIPE:
                      case COLON:
                      case COMMA:
                      case DELETELINE:
                      case STRONGITALIC:
                      case WIKINAME:
                      case NATIVELINK:
                      case ANCHOR:
                      case PAGENAME:
                      case LINK:
                      case INTERWIKI:
                      case ALIASLINK:
                      case ALIAS:
                      case IDENTIFIER:
                      case ARGS:
                      case INLINEPLUGIN:
                      case ANYOTHER:
                      case 73:
                        ;
                        break;
                      default:
                        break label_17;
                      }
                      InlineElement();
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case TABLEDEL:
                      jj_consume_token(TABLEDEL);
                      break;
                    case NTABCOLSPAN:
                      jj_consume_token(NTABCOLSPAN);
                      break;
                    case NTABROWSPAN:
                      jj_consume_token(NTABROWSPAN);
                      break;
                    default:
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
              } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
              }
              if (jj_2_9(1)) {
                ;
              } else {
                break label_15;
              }
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              t = jj_consume_token(IDENTIFIER);
                                             jjtn002.type=GenerateNodeHelper.getTableType(t.image);
              break;
            default:
              ;
            }
          } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
          } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
          }
        } catch (ParseException pe) {
                        processError("parsing error for table.",false,pe);
        }
        if (isTable()) {
          ;
        } else {
          break label_14;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CSVTable() throws ParseException {
 /*@bgen(jjtree) CSVTable */
  WikiCSVTable jjtn000 = new WikiCSVTable(JJTCSVTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_18:
      while (true) {
        jj_consume_token(CTABLE);
                                                    setStartPosition();
        try {
                          WikiTablemember jjtn002 = new WikiTablemember(JJTTABLEMEMBER);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
          try {
            label_19:
            while (true) {
                                  WikiTablecolumn jjtn001 = new WikiTablecolumn(JJTTABLECOLUMN);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
              try {
                if (jj_2_10(2)) {
                  jj_consume_token(COLSPAN);
                  jj_consume_token(CTABLEDEL);
                                                                             jjtree.closeNodeScope(jjtn001, true);
                                                                             jjtc001 = false;
                                                                            jjtn001.iscolspan=true;
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case TILDE:
                  case SEMICOLON:
                  case LPAREN:
                  case RPAREN:
                  case LBRACKET:
                  case RBRACKET:
                  case LBRACE:
                  case RBRACE:
                  case SLASH:
                  case LT:
                  case EXCERPT1:
                  case EXCERPT2:
                  case EXCERPT3:
                  case LIST1:
                  case LIST2:
                  case LIST3:
                  case NLIST1:
                  case NLIST2:
                  case NLIST3:
                  case PRESHAPED:
                  case HEADING1:
                  case HEADING2:
                  case HEADING3:
                  case ALIGN1:
                  case ALIGN2:
                  case ALIGN3:
                  case FALIGN1:
                  case FALIGN2:
                  case HORIZONTAL:
                  case BLOCKPLUGIN:
                  case COLSPAN:
                  case PIPE:
                  case COLON:
                  case COMMA:
                  case CTABLEDEL:
                  case DELETELINE:
                  case STRONGITALIC:
                  case WIKINAME:
                  case NATIVELINK:
                  case ANCHOR:
                  case PAGENAME:
                  case LINK:
                  case INTERWIKI:
                  case ALIASLINK:
                  case ALIAS:
                  case IDENTIFIER:
                  case ARGS:
                  case INLINEPLUGIN:
                  case ANYOTHER:
                  case 73:
                    label_20:
                    while (true) {
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case TILDE:
                      case SEMICOLON:
                      case LPAREN:
                      case RPAREN:
                      case LBRACKET:
                      case RBRACKET:
                      case LBRACE:
                      case RBRACE:
                      case SLASH:
                      case LT:
                      case EXCERPT1:
                      case EXCERPT2:
                      case EXCERPT3:
                      case LIST1:
                      case LIST2:
                      case LIST3:
                      case NLIST1:
                      case NLIST2:
                      case NLIST3:
                      case PRESHAPED:
                      case HEADING1:
                      case HEADING2:
                      case HEADING3:
                      case ALIGN1:
                      case ALIGN2:
                      case ALIGN3:
                      case FALIGN1:
                      case FALIGN2:
                      case HORIZONTAL:
                      case BLOCKPLUGIN:
                      case COLSPAN:
                      case PIPE:
                      case COLON:
                      case COMMA:
                      case DELETELINE:
                      case STRONGITALIC:
                      case WIKINAME:
                      case NATIVELINK:
                      case ANCHOR:
                      case PAGENAME:
                      case LINK:
                      case INTERWIKI:
                      case ALIASLINK:
                      case ALIAS:
                      case IDENTIFIER:
                      case ARGS:
                      case INLINEPLUGIN:
                      case ANYOTHER:
                      case 73:
                        ;
                        break;
                      default:
                        break label_20;
                      }
                      InlineElement();
                    }
                    jj_consume_token(CTABLEDEL);
                    break;
                  default:
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
              } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case TILDE:
              case SEMICOLON:
              case LPAREN:
              case RPAREN:
              case LBRACKET:
              case RBRACKET:
              case LBRACE:
              case RBRACE:
              case SLASH:
              case LT:
              case EXCERPT1:
              case EXCERPT2:
              case EXCERPT3:
              case LIST1:
              case LIST2:
              case LIST3:
              case NLIST1:
              case NLIST2:
              case NLIST3:
              case PRESHAPED:
              case HEADING1:
              case HEADING2:
              case HEADING3:
              case ALIGN1:
              case ALIGN2:
              case ALIGN3:
              case FALIGN1:
              case FALIGN2:
              case HORIZONTAL:
              case BLOCKPLUGIN:
              case COLSPAN:
              case PIPE:
              case COLON:
              case COMMA:
              case CTABLEDEL:
              case DELETELINE:
              case STRONGITALIC:
              case WIKINAME:
              case NATIVELINK:
              case ANCHOR:
              case PAGENAME:
              case LINK:
              case INTERWIKI:
              case ALIASLINK:
              case ALIAS:
              case IDENTIFIER:
              case ARGS:
              case INLINEPLUGIN:
              case ANYOTHER:
              case 73:
                ;
                break;
              default:
                break label_19;
              }
            }
          } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
          } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
          }
        } catch (ParseException pe) {
                        processError("parsing error for table.",false,pe);
        }
        if (isCSVTable()) {
          ;
        } else {
          break label_18;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Heading() throws ParseException {
 /*@bgen(jjtree) Heading */
        WikiHeading jjtn000 = new WikiHeading(JJTHEADING);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(NL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADING1:
        t = jj_consume_token(HEADING1);
        break;
      case HEADING2:
        t = jj_consume_token(HEADING2);
        break;
      case HEADING3:
        t = jj_consume_token(HEADING3);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_21:
      while (true) {
        InlineElement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case DELETELINE:
        case STRONGITALIC:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
        case 73:
          ;
          break;
        default:
          break label_21;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.level=t.image.length();
                jjtn000.num=addTOC(jjtn000);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Align() throws ParseException {
 /*@bgen(jjtree) Align */
        WikiAlign jjtn000 = new WikiAlign(JJTALIGN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(NL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALIGN1:
        t = jj_consume_token(ALIGN1);
        break;
      case ALIGN2:
        t = jj_consume_token(ALIGN2);
        break;
      case ALIGN3:
        t = jj_consume_token(ALIGN3);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case DELETELINE:
        case STRONGITALIC:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
        case 73:
          ;
          break;
        default:
          break label_22;
        }
        InlineElement();
      }
      label_23:
      while (true) {
        if (!isBlankline()) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(NL);
        label_24:
        while (true) {
          InlineElement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
          case SEMICOLON:
          case LPAREN:
          case RPAREN:
          case LBRACKET:
          case RBRACKET:
          case LBRACE:
          case RBRACE:
          case SLASH:
          case LT:
          case EXCERPT1:
          case EXCERPT2:
          case EXCERPT3:
          case LIST1:
          case LIST2:
          case LIST3:
          case NLIST1:
          case NLIST2:
          case NLIST3:
          case PRESHAPED:
          case HEADING1:
          case HEADING2:
          case HEADING3:
          case ALIGN1:
          case ALIGN2:
          case ALIGN3:
          case FALIGN1:
          case FALIGN2:
          case HORIZONTAL:
          case BLOCKPLUGIN:
          case COLSPAN:
          case PIPE:
          case COLON:
          case COMMA:
          case DELETELINE:
          case STRONGITALIC:
          case WIKINAME:
          case NATIVELINK:
          case ANCHOR:
          case PAGENAME:
          case LINK:
          case INTERWIKI:
          case ALIASLINK:
          case ALIAS:
          case IDENTIFIER:
          case ARGS:
          case INLINEPLUGIN:
          case ANYOTHER:
          case 73:
            ;
            break;
          default:
            break label_24;
          }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.image = t.image;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FloatAlign() throws ParseException {
 /*@bgen(jjtree) FloatAlign */
        WikiFloatAlign jjtn000 = new WikiFloatAlign(JJTFLOATALIGN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(NL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALIGN1:
        t = jj_consume_token(FALIGN1);
        break;
      case FALIGN2:
        t = jj_consume_token(FALIGN2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case DELETELINE:
        case STRONGITALIC:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
        case 73:
          ;
          break;
        default:
          break label_25;
        }
        InlineElement();
      }
      label_26:
      while (true) {
        if (jj_2_11(1)) {
          ;
        } else {
          break label_26;
        }
        if (isExcerpt()) {
          Excerpt();
        } else if (isList()) {
          List();
        } else if (isDefineList()) {
          DefineList();
        } else if (isPreshaped()) {
          Preshaped();
        } else if (isTable()) {
          Table();
        } else if (isCSVTable()) {
          CSVTable();
        } else if (isBlockPlugin()) {
          BlockPlugin();
        } else if (isParagraph()) {
          Paragraph();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.image = t.image;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Horizontalline() throws ParseException {
 /*@bgen(jjtree) Horizontalline */
  WikiHorizontalline jjtn000 = new WikiHorizontalline(JJTHORIZONTALLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NL);
      jj_consume_token(HORIZONTAL);
      SkipToNewline();
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Blankline() throws ParseException {
    jj_consume_token(NL);
  }

  final public void BlockPlugin() throws ParseException {
 /*@bgen(jjtree) BlockPlugin */
        WikiBlockPlugin jjtn000 = new WikiBlockPlugin(JJTBLOCKPLUGIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(NL);
      t = jj_consume_token(BLOCKPLUGIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGS:
        Args();
        break;
      default:
        ;
      }
      SkipToNewline();
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                       jjtn000.name = t.image.substring(1);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* InlineElement Definition */

/**
 * 
 */
  final public void Letters() throws ParseException {
 /*@bgen(jjtree) Letters */
        WikiLetters jjtn000 = new WikiLetters(JJTLETTERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATIVELINK:
        t = jj_consume_token(NATIVELINK);
                if(GenerateNodeHelper.isEmail(t.image)){
                        jjtn000.isEmail = true;
                }else{
                        jjtn000.isURL = true;
                }
        break;
      case WIKINAME:
        t = jj_consume_token(WIKINAME);
                        jjtn000.isWikiname = true;
        break;
      case ANCHOR:
        t = jj_consume_token(ANCHOR);
                jjtn000.isAnchor = true;
                jjtn000.letter = GenerateNodeHelper.deleteParenthesis(t.image,"[","]");
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case TILDE:
        t = jj_consume_token(TILDE);
                // Inline newline implimentation, by action, not NT.
                // it is not clear for syntax structure, though,
                // <NL> token works as delimiter between BlockElement,
                // it is not good idea to consume <NL> at the inline newline.
                if(isNewline(1)) jjtn000.isNewline = true;
        break;
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
        break;
      case LPAREN:
        t = jj_consume_token(LPAREN);
        break;
      case RPAREN:
        t = jj_consume_token(RPAREN);
        break;
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
        break;
      case RBRACKET:
        t = jj_consume_token(RBRACKET);
        break;
      case LBRACE:
        t = jj_consume_token(LBRACE);
        break;
      case RBRACE:
        t = jj_consume_token(RBRACE);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case EXCERPT1:
        t = jj_consume_token(EXCERPT1);
                        jjtn000.isHTMLescape = true;
        break;
      case EXCERPT2:
        t = jj_consume_token(EXCERPT2);
                        jjtn000.isHTMLescape = true;
        break;
      case EXCERPT3:
        t = jj_consume_token(EXCERPT3);
                        jjtn000.isHTMLescape = true;
        break;
      case LT:
        t = jj_consume_token(LT);
                  jjtn000.isHTMLescape = true;
        break;
      case LIST1:
        t = jj_consume_token(LIST1);
        break;
      case LIST2:
        t = jj_consume_token(LIST2);
        break;
      case LIST3:
        t = jj_consume_token(LIST3);
        break;
      case NLIST1:
        t = jj_consume_token(NLIST1);
        break;
      case NLIST2:
        t = jj_consume_token(NLIST2);
        break;
      case NLIST3:
        t = jj_consume_token(NLIST3);
        break;
      case ALIGN1:
        t = jj_consume_token(ALIGN1);
        break;
      case ALIGN2:
        t = jj_consume_token(ALIGN2);
        break;
      case ALIGN3:
        t = jj_consume_token(ALIGN3);
        break;
      case FALIGN1:
        t = jj_consume_token(FALIGN1);
        break;
      case FALIGN2:
        t = jj_consume_token(FALIGN2);
        break;
      case COLON:
        t = jj_consume_token(COLON);
        break;
      case PRESHAPED:
        t = jj_consume_token(PRESHAPED);
        break;
      case HEADING1:
        t = jj_consume_token(HEADING1);
        break;
      case HEADING2:
        t = jj_consume_token(HEADING2);
        break;
      case HEADING3:
        t = jj_consume_token(HEADING3);
        break;
      case HORIZONTAL:
        t = jj_consume_token(HORIZONTAL);
        break;
      case PIPE:
        t = jj_consume_token(PIPE);
        break;
      case COMMA:
        t = jj_consume_token(COMMA);
        break;
      case COLSPAN:
        t = jj_consume_token(COLSPAN);
        break;
      case ARGS:
        t = jj_consume_token(ARGS);
        break;
      case BLOCKPLUGIN:
        t = jj_consume_token(BLOCKPLUGIN);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         if(!jjtn000.isAnchor) jjtn000.letter = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AnyOther() throws ParseException {
 /*@bgen(jjtree) AnyOther */
        WikiAnyOther jjtn000 = new WikiAnyOther(JJTANYOTHER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ANYOTHER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.letter = t.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StrongItalic() throws ParseException {
 /*@bgen(jjtree) StrongItalic */
        WikiStrongItalic jjtn000 = new WikiStrongItalic(JJTSTRONGITALIC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRONGITALIC);
                          jjtn000.prelevel = t.image.length();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETELINE:
          Deleteline();
          break;
        case 73:
          Annotation();
          break;
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
          Linker();
          break;
        case INLINEPLUGIN:
          InlinePlugin();
          break;
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case IDENTIFIER:
        case ARGS:
          Letters();
          break;
        case ANYOTHER:
          AnyOther();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case DELETELINE:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
        case 73:
          ;
          break;
        default:
          break label_27;
        }
      }
      t = jj_consume_token(STRONGITALIC);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.postlevel = t.image.length();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Deleteline() throws ParseException {
 /*@bgen(jjtree) Deleteline */
  WikiDeleteline jjtn000 = new WikiDeleteline(JJTDELETELINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DELETELINE);
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRONGITALIC:
          StrongItalic();
          break;
        case 73:
          Annotation();
          break;
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
          Linker();
          break;
        case INLINEPLUGIN:
          InlinePlugin();
          break;
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case IDENTIFIER:
        case ARGS:
          Letters();
          break;
        case ANYOTHER:
          AnyOther();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case STRONGITALIC:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
        case 73:
          ;
          break;
        default:
          break label_28;
        }
      }
      jj_consume_token(DELETELINE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Annotation() throws ParseException {
 /*@bgen(jjtree) Annotation */
  WikiAnnotation jjtn000 = new WikiAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(73);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRONGITALIC:
          StrongItalic();
          break;
        case DELETELINE:
          Deleteline();
          break;
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
          Linker();
          break;
        case INLINEPLUGIN:
          InlinePlugin();
          break;
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case IDENTIFIER:
        case ARGS:
          Letters();
          break;
        case ANYOTHER:
          AnyOther();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case SEMICOLON:
        case LPAREN:
        case RPAREN:
        case LBRACKET:
        case RBRACKET:
        case LBRACE:
        case RBRACE:
        case SLASH:
        case LT:
        case EXCERPT1:
        case EXCERPT2:
        case EXCERPT3:
        case LIST1:
        case LIST2:
        case LIST3:
        case NLIST1:
        case NLIST2:
        case NLIST3:
        case PRESHAPED:
        case HEADING1:
        case HEADING2:
        case HEADING3:
        case ALIGN1:
        case ALIGN2:
        case ALIGN3:
        case FALIGN1:
        case FALIGN2:
        case HORIZONTAL:
        case BLOCKPLUGIN:
        case COLSPAN:
        case PIPE:
        case COLON:
        case COMMA:
        case DELETELINE:
        case STRONGITALIC:
        case WIKINAME:
        case NATIVELINK:
        case ANCHOR:
        case PAGENAME:
        case LINK:
        case INTERWIKI:
        case ALIASLINK:
        case ALIAS:
        case IDENTIFIER:
        case ARGS:
        case INLINEPLUGIN:
        case ANYOTHER:
          ;
          break;
        default:
          break label_29;
        }
      }
      jj_consume_token(74);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                int i = addAnnotation(jjtn000);
                jjtn000.num = i;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Linker() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERWIKI:
                  WikiInterwiki jjtn001 = new WikiInterwiki(JJTINTERWIKI);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
        t = jj_consume_token(INTERWIKI);
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                jjtn001.image = t.image.substring(2,t.image.length()-2);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
      break;
    case LINK:
                    WikiLink jjtn002 = new WikiLink(JJTLINK);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
      try {
        t = jj_consume_token(LINK);
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
                             jjtn002.image=t.image.substring(2,t.image.length()-2);
      } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
      }
      break;
    case ALIASLINK:
    case ALIAS:
                    WikiAlias jjtn003 = new WikiAlias(JJTALIAS);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALIAS:
          t = jj_consume_token(ALIAS);
          break;
        case ALIASLINK:
          t = jj_consume_token(ALIASLINK);
                                  jjtn003.islink=true;
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                          jjtree.closeNodeScope(jjtn003, true);
                                                          jjtc003 = false;
                                                         jjtn003.image=t.image.substring(2,t.image.length()-2);
      } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
      }
      break;
    case PAGENAME:
                    WikiPagename jjtn004 = new WikiPagename(JJTPAGENAME);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
      try {
        t = jj_consume_token(PAGENAME);
                                  jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
                                 jjtn004.image = t.image.substring(2,t.image.length()-2);
      } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InlinePlugin() throws ParseException {
 /*@bgen(jjtree) InlinePlugin */
        WikiInlinePlugin jjtn000 = new WikiInlinePlugin(JJTINLINEPLUGIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INLINEPLUGIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGS:
        Args();
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRONGITALIC:
            StrongItalic();
            break;
          case DELETELINE:
            Deleteline();
            break;
          case 73:
            Annotation();
            break;
          case PAGENAME:
          case LINK:
          case INTERWIKI:
          case ALIASLINK:
          case ALIAS:
            Linker();
            break;
          case INLINEPLUGIN:
            InlinePlugin();
            break;
          default:
            if (!(getToken(1).kind==RBRACE && getToken(2).kind == SEMICOLON)) {
              Letters();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          if (jj_2_12(1)) {
            ;
          } else {
            break label_30;
          }
        }
        jj_consume_token(RBRACE);
        break;
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.name = t.image.substring(1);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Other Element Definition */
  final public void Args() throws ParseException {
 /*@bgen(jjtree) Args */
        WikiArgs jjtn000 = new WikiArgs(JJTARGS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ARGS);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.args = GenerateNodeHelper.splitArgs(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Errors() throws ParseException {
 /*@bgen(jjtree) Errors */
  WikiErrors jjtn000 = new WikiErrors(JJTERRORS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(INTERWIKI)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(COLSPAN)) return true;
    if (jj_scan_token(CTABLEDEL)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(SIZEWORD)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(BGCOLORWORD)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(COLORWORD)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(ALIGN3)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(ALIGN2)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(ALIGN1)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isExcerpt();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_78()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_79()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isDefineList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_80()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isPreshaped();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_81()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_82()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isCSVTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_83()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isHeading();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_84()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isAlign();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_85()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isFloatAlign();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_86()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isHorizontalline();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_87()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isBlankline();
    lookingAhead = false;
    if (!jj_semLA || jj_scan_token(9)) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isBlockPlugin();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = !(getToken(1).kind==IDENTIFIER && isNewline(2));
    lookingAhead = false;
    if (!jj_semLA || jj_3R_60()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(NTABROWSPAN)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(CTABLE)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(NTABCOLSPAN)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    if (jj_3R_112()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(DELETELINE)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(STRONGITALIC)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    if (jj_3R_111()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isExcerpt();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_51()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_52()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isPreshaped();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_53()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_54()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isCSVTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_55()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isAlign();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_56()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isBlockPlugin();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_57()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isParagraph();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(ANYOTHER)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    if (jj_3R_110()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(DLIST)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isExcerpt();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_42()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isDefineList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_43()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isPreshaped();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_44()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_45()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isCSVTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_46()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isAlign();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_47()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isBlockPlugin();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_48()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isParagraph();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    if (jj_3R_109()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(EXCERPT3)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(EXCERPT2)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(EXCERPT1)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_50()) return true;
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(ANCHOR)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(WIKINAME)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isExcerpt();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_33()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_34()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isDefineList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_35()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isPreshaped();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_36()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_37()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isCSVTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_38()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isAlign();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_39()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isBlockPlugin();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_40()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isParagraph();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(NATIVELINK)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    if (jj_3R_89()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = !(getToken(1).kind==RBRACE && getToken(2).kind == SEMICOLON);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_77()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = isExcerpt();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_64()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_65()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isDefineList();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_66()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isPreshaped();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_67()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_68()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isCSVTable();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_69()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isBlockPlugin();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_70()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isParagraph();
    lookingAhead = false;
    if (!jj_semLA || jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(PAGENAME)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(ALIASLINK)) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(INLINEPLUGIN)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(LINK)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_90()) return true;
    return false;
  }

  public WikiParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;

  public WikiParser(CharStream stream) {
    token_source = new WikiParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  public WikiParser(WikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(WikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
